/*
 * Sudoku.cpp
 *
 */

#include "Sudoku.h"

/** Inicia um Sudoku vazio.
 */
Sudoku::Sudoku()
{
	this->initialize();
}

/**
 * Inicia um Sudoku com um conteúdo inicial.
 * Lança excepção IllegalArgumentException se os valores
 * estiverem fora da gama de 1 a 9 ou se existirem números repetidos
 * por linha, coluna ou bloc 3x3.
 *
 * @param nums matriz com os valores iniciais (0 significa por preencher)
 */
Sudoku::Sudoku(int nums[9][9])
{
	this->initialize();

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			if (nums[i][j] != 0)
			{
				int n = nums[i][j];
				numbers[i][j] = n;
				lineHasNumber[i][n] = true;
				columnHasNumber[j][n] = true;
				block3x3HasNumber[i / 3][j / 3][n] = true;
				countFilled++;
			}
		}
	}
}

void Sudoku::initialize()
{
	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			for (int n = 0; n < 10; n++)
			{
				numbers[i][j] = 0;
				lineHasNumber[i][n] = false;
				columnHasNumber[j][n] = false;
				block3x3HasNumber[i / 3][j / 3][n] = false;
			}
		}
	}

	this->countFilled = 0;
}

/**
 * Obtem o conteúdo actual (só para leitura!).
 */
int** Sudoku::getNumbers()
{
	int** ret = new int*[9];

	for (int i = 0; i < 9; i++)
	{
		ret[i] = new int[9];

		for (int a = 0; a < 9; a++)
			ret[i][a] = numbers[i][a];
	}

	return ret;
}

/**
 * Verifica se o Sudoku já está completamente resolvido
 */
bool Sudoku::isComplete()
{
	return countFilled == 9 * 9;
}



/**
 * Resolve o Sudoku.
 * Retorna indicação de sucesso ou insucesso (sudoku impossível).
 */
bool Sudoku::solve()
{
	solve_coord(0, 0);
	print();
	return isComplete();
}

bool Sudoku::solve_coord(int x, int y) {
	if (numbers[x][y] == 0) {
		countFilled++;
		for (int i = 0; i < 9; i++) {
			numbers[x][y] = i;
			if (check_if_possible(x, y))
				if (x != 8 || y != 8) {
					if (x == 8)
						solve_coord(0, y+1);
					else
						solve_coord(x+1,y);
				}
				else return true;
			else
				continue;
		}
	}
	else {
		if (x != 8 || y != 8) {
			if (x == 8)
				solve_coord(0, y+1);
			else
				solve_coord(x+1,y);
		}
		else return true;
	}
	return false;
}

bool Sudoku::check_if_possible(int x, int y) {
	int number = numbers[x][y];
	for (int i = 0; i < 9; i++)
		if (i != x)
			if (numbers[i][y] == number)
				return false;
	for (int i = 0; i < 9; i++)
		if (i != y)
			if (numbers[x][i] == number)
				return false;
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			if (i != x && j != y)
				if (numbers[x/3+i][y/3+j] == number)
					return false;
	return true;
}

/**
 * Imprime o Sudoku.
 */
void Sudoku::print()
{
	for (int i = 0; i < 9; i++)
	{
		for (int a = 0; a < 9; a++)
			cout << this->numbers[i][a] << " ";

		cout << endl;
	}
}
